import 'package:aurora_mail/database/app_database.dart';
import 'package:aurora_mail/modules/contacts/contacts_domain/models/contact_model.dart';

class ContactMapper {
  static List<Contact> fromDB(List<ContactsTable> dbEntries) {
    return dbEntries.map((e) {
      return new Contact(
        entityId: e.entityId,
        uuid: e.uuid,
        parentUuid: e.parentUuid,
        idUser: e.idUser,
        idTenant: e.idTenant,
        storage: e.storage,
        fullName: e.fullName,
        useFriendlyName: e.useFriendlyName,
        primaryEmail: e.primaryEmail,
        primaryPhone: e.primaryPhone,
        primaryAddress: e.primaryAddress,
        viewEmail: e.viewEmail,
        title: e.title,
        firstName: e.firstName,
        lastName: e.lastName,
        nickName: e.nickName,
        skype: e.skype,
        facebook: e.facebook,
        personalEmail: e.personalEmail,
        personalAddress: e.personalAddress,
        personalCity: e.personalCity,
        personalState: e.personalState,
        personalZip: e.personalZip,
        personalCountry: e.personalCountry,
        personalWeb: e.personalWeb,
        personalFax: e.personalFax,
        personalPhone: e.personalPhone,
        personalMobile: e.personalMobile,
        businessEmail: e.businessEmail,
        businessCompany: e.businessCompany,
        businessAddress: e.businessAddress,
        businessCity: e.businessCity,
        businessState: e.businessState,
        businessZip: e.businessZip,
        businessCountry: e.businessCountry,
        businessJobTitle: e.businessJobTitle,
        businessDepartment: e.businessDepartment,
        businessOffice: e.businessOffice,
        businessPhone: e.businessPhone,
        businessFax: e.businessFax,
        businessWeb: e.businessWeb,
        otherEmail: e.otherEmail,
        notes: e.notes,
        birthDay: e.birthDay,
        birthMonth: e.birthMonth,
        birthYear: e.birthYear,
        eTag: e.eTag,
        auto: e.auto,
        frequency: e.frequency,
        dateModified: e.dateModified,
        davContactsUid: e.davContactsUid,
        davContactsVCardUid: e.davContactsVCardUid,
        groupUUIDs: e.groupUUIDs,
      );
    }).toList();
  }

  static List<ContactsTable> toDB(List<Contact> contacts) {
    return contacts.map((e) {
      return new ContactsTable(
        entityId: e.entityId,
        uuid: e.uuid,
        parentUuid: e.parentUuid,
        idUser: e.idUser,
        idTenant: e.idTenant,
        storage: e.storage,
        fullName: e.fullName,
        useFriendlyName: e.useFriendlyName,
        primaryEmail: e.primaryEmail,
        primaryPhone: e.primaryPhone,
        primaryAddress: e.primaryAddress,
        viewEmail: e.viewEmail,
        title: e.title,
        firstName: e.firstName,
        lastName: e.lastName,
        nickName: e.nickName,
        skype: e.skype,
        facebook: e.facebook,
        personalEmail: e.personalEmail,
        personalAddress: e.personalAddress,
        personalCity: e.personalCity,
        personalState: e.personalState,
        personalZip: e.personalZip,
        personalCountry: e.personalCountry,
        personalWeb: e.personalWeb,
        personalFax: e.personalFax,
        personalPhone: e.personalPhone,
        personalMobile: e.personalMobile,
        businessEmail: e.businessEmail,
        businessCompany: e.businessCompany,
        businessAddress: e.businessAddress,
        businessCity: e.businessCity,
        businessState: e.businessState,
        businessZip: e.businessZip,
        businessCountry: e.businessCountry,
        businessJobTitle: e.businessJobTitle,
        businessDepartment: e.businessDepartment,
        businessOffice: e.businessOffice,
        businessPhone: e.businessPhone,
        businessFax: e.businessFax,
        businessWeb: e.businessWeb,
        otherEmail: e.otherEmail,
        notes: e.notes,
        birthDay: e.birthDay,
        birthMonth: e.birthMonth,
        birthYear: e.birthYear,
        eTag: e.eTag,
        auto: e.auto,
        frequency: e.frequency,
        dateModified: e.dateModified,
        davContactsUid: e.davContactsUid,
        davContactsVCardUid: e.davContactsVCardUid,
        groupUUIDs: e.groupUUIDs,
      );
    }).toList();
  }

  static List<Contact> fromNetwork(List<dynamic> rawItems) {
    return rawItems.map((i) {
      return new Contact(
        entityId: i["EntityId"] as int,
        uuid: i["UUID"] as String,
        parentUuid: i["ParentUUID"] as String,
        idUser: i["IdUser"] as int,
        idTenant: i["IdTenant"] as int,
        storage: i["Storage"] as String,
        fullName: i["FullName"] as String,
        useFriendlyName: i["UseFriendlyName"] as bool,
        primaryEmail: i["PrimaryEmail"] as int,
        primaryPhone: i["PrimaryPhone"] as int,
        primaryAddress: i["PrimaryAddress"] as int,
        viewEmail: i["ViewEmail"] as String,
        title: i["Title"] as String,
        firstName: i["FirstName"] as String,
        lastName: i["LastName"] as String,
        nickName: i["NickName"] as String,
        skype: i["Skype"] as String,
        facebook: i["Facebook"] as String,
        personalEmail: i["PersonalEmail"] as String,
        personalAddress: i["PersonalAddress"] as String,
        personalCity: i["PersonalCity"] as String,
        personalState: i["PersonalState"] as String,
        personalZip: i["PersonalZip"] as String,
        personalCountry: i["PersonalCountry"] as String,
        personalWeb: i["PersonalWeb"] as String,
        personalFax: i["PersonalFax"] as String,
        personalPhone: i["PersonalPhone"] as String,
        personalMobile: i["PersonalMobile"] as String,
        businessEmail: i["BusinessEmail"] as String,
        businessCompany: i["BusinessCompany"] as String,
        businessAddress: i["BusinessAddress"] as String,
        businessCity: i["BusinessCity"] as String,
        businessState: i["BusinessState"] as String,
        businessZip: i["BusinessZip"] as String,
        businessCountry: i["BusinessCountry"] as String,
        businessJobTitle: i["BusinessJobTitle"] as String,
        businessDepartment: i["BusinessDepartment"] as String,
        businessOffice: i["BusinessOffice"] as String,
        businessPhone: i["BusinessPhone"] as String,
        businessFax: i["BusinessFax"] as String,
        businessWeb: i["BusinessWeb"] as String,
        otherEmail: i["OtherEmail"] as String,
        notes: i["Notes"] as String,
        birthDay: i["BirthDay"] as int,
        birthMonth: i["BirthMonth"] as int,
        birthYear: i["BirthYear"] as int,
        eTag: i["ETag"] as String,
        auto: i["Auto"] as bool,
        frequency: i["Frequency"] as int,
        dateModified: i["DateModified"] as String,
        davContactsUid: i["DavContacts::UID"] as String,
        davContactsVCardUid: i["DavContacts::VCardUID"] as String,
        groupUUIDs: new List<String>.from(i["GroupUUIDs"] as List),
      );
    }).toList();
  }
}
